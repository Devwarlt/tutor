{\rtf1\ansi\deff0\deftab720{\fonttbl{\f0\fmodern Courier New;}}
{\colortbl\red0\green128\blue0;\red0\green0\blue0;\red255\green0\blue0;\red0\green0\blue255;\red209\green209\blue209;\red128\green0\blue128;}
{\info{\comment Generated by the SynEdit RTF exporter}
{\title dynamic_stack.rtf}}

\deflang1033\pard\plain\f0\fs20 \cf0 #define ENABLE_DEBUG true
\par 
\par #include "stdio.h"
\par #include "stdlib.h"
\par #include "stdbool.h"
\par #include "string.h"
\par 
\par \cf1\b void\b0  ThrowException\cf2\b (\cf1 char\cf2 *\b0\cf1  exception\cf2\b ,\b0\cf1  \b char\cf2 *\b0\cf1  message\cf2\b ,\b0\cf1  \b bool\b0  safeExit\cf2\b ,\b0\cf1  \b char\cf2 *\b0\cf1  name\cf2\b )\b0\cf1  \cf2\b \{
\par \b0\cf1 	\b if\b0  \cf2\b (!\b0\cf1 exception\cf2\b )
\par \b0\cf1 		printf\cf2\b (\cf3 "\\n[Undefined Exception]:\\n\\t[Pilha %s] %s\\n"\cf2 ,\b0\cf1  name\cf2\b ,\b0\cf1  exception\cf2\b ,\b0\cf1  message\cf2\b );
\par \b0\cf1 	\b else
\par \b0 		printf\cf2\b (\cf3 "\\n[%s Exception]:\\n\\t[Pilha %s] %s\\n"\cf2 ,\b0\cf1  exception\cf2\b ,\b0\cf1  name\cf2\b ,\b0\cf1  message\cf2\b );
\par \b0\cf1 	
\par 	\b if\b0  \cf2\b (\b0\cf1 safeExit\cf2\b )
\par \b0\cf1 		exit\cf2\b (\b0\cf1 EXIT_FAILURE\cf2\b );
\par \}
\par 
\par \cf1 struct\b0  Item \cf2\b \{
\par \b0\cf1 	\b char\b0  Value\cf2\b ;
\par \b0\cf1 	\b struct\b0  Item \cf2\b *\b0\cf1 Next\cf2\b ;
\par \};
\par 
\par \cf1 typedef\b0  \b struct\b0  \cf2\b \{
\par \b0\cf1 	\b struct\b0  Item \cf2\b *\b0\cf1 Peek\cf2\b ;
\par \}\b0\cf1  Stack\cf2\b ;
\par 
\par \cf1 void\b0  Init\cf2\b (\b0\cf1 Stack \cf2\b *\b0\cf1 stack\cf2\b )\b0\cf1  \cf2\b \{
\par \b0\cf1 	stack\cf2\b ->\b0\cf1 Peek \cf2\b =\b0\cf1  NULL\cf2\b ;
\par \}
\par 
\par \cf1 bool\b0  IsEmpty\cf2\b (\b0\cf1 Stack \cf2\b *\b0\cf1 stack\cf2\b )\b0\cf1  \cf2\b \{
\par \b0\cf1 	\b return\b0  stack\cf2\b ->\b0\cf1 Peek \cf2\b ==\b0\cf1  NULL\cf2\b ;
\par \}
\par 
\par \cf1 void\b0  Push\cf2\b (\b0\cf1 Stack \cf2\b *\b0\cf1 stack\cf2\b ,\b0\cf1  \b char\b0  value\cf2\b ,\b0\cf1  \b char\cf2 *\b0\cf1  name\cf2\b )\b0\cf1  \cf2\b \{
\par \b0\cf1 	\b struct\b0  Item \cf2\b *\b0\cf1 item \cf2\b =\b0\cf1  \cf2\b (\cf1 struct\b0  Item\cf2\b *)\b0\cf1  malloc\cf2\b (\cf1 sizeof\cf2 (\cf1 struct\b0  Item\cf2\b ));
\par \b0\cf1 	item\cf2\b ->\b0\cf1 Value \cf2\b =\b0\cf1  value\cf2\b ;
\par \b0\cf1 	item\cf2\b ->\b0\cf1 Next \cf2\b =\b0\cf1  stack\cf2\b ->\b0\cf1 Peek\cf2\b ;
\par \b0\cf1 	stack\cf2\b ->\b0\cf1 Peek \cf2\b =\b0\cf1  item\cf2\b ;
\par \b0\cf1 	
\par 	\b if\b0  \cf2\b (\b0\cf1 ENABLE_DEBUG\cf2\b )
\par \b0\cf1 		printf\cf2\b (\cf3 "[Push Event] > Adicionando o elemento %c na pilha %s.\\n"\cf2 ,\b0\cf1  value\cf2\b ,\b0\cf1  name\cf2\b );
\par \}
\par 
\par \cf1 char\b0  Pop\cf2\b (\b0\cf1 Stack \cf2\b *\b0\cf1 stack\cf2\b ,\b0\cf1  \b char\cf2 *\b0\cf1  name\cf2\b )\b0\cf1  \cf2\b \{
\par \b0\cf1 	\b if\b0  \cf2\b (\b0\cf1 IsEmpty\cf2\b (\b0\cf1 stack\cf2\b ))\b0\cf1  \cf2\b \{
\par \b0\cf1 		ThrowException\cf2\b (\cf3 "Stack Underflow"\cf2 ,\b0\cf1  \cf3\b "A pilha está vazia!"\cf2 ,\b0\cf1  \b false\cf2 ,\b0\cf1  name\cf2\b );
\par \b0\cf1 		\b return\b0  '.'\cf2\b ;
\par \b0\cf1 	\cf2\b \}
\par \b0\cf1 	
\par 	\b char\b0  value \cf2\b =\b0\cf1  stack\cf2\b ->\b0\cf1 Peek\cf2\b ->\b0\cf1 Value\cf2\b ;
\par \b0\cf1 	\b struct\b0  Item \cf2\b *\b0\cf1 item \cf2\b =\b0\cf1  stack\cf2\b ->\b0\cf1 Peek\cf2\b ;
\par \b0\cf1 	stack\cf2\b ->\b0\cf1 Peek \cf2\b =\b0\cf1  stack\cf2\b ->\b0\cf1 Peek\cf2\b ->\b0\cf1 Next\cf2\b ;
\par \b0\cf1 	
\par 	free\cf2\b (\b0\cf1 item\cf2\b );\b0\cf1  \cf4\i // release memory cache for specific pointer address
\par \i0\cf1 	
\par 	\b if\b0  \cf2\b (\b0\cf1 ENABLE_DEBUG\cf2\b )
\par \b0\cf1 		printf\cf2\b (\cf3 "[Pop Event] > Removendo o elemento %c na pilha %s.\\n"\cf2 ,\b0\cf1  value\cf2\b ,\b0\cf1  name\cf2\b );
\par 
\par \b0\cf1 	\b return\b0  value\cf2\b ;
\par \}
\par 
\par \cf1 void\b0  AutoPush\cf2\b (\b0\cf1 Stack \cf2\b *\b0\cf1 stack\cf2\b ,\b0\cf1  \b char\cf2 *\b0\cf1  name\cf2\b )\b0\cf1  \cf2\b \{
\par \b0\cf1 	printf\cf2\b (\cf3 "--- [Automatic Push Event] ---\\n\\n"\cf2 );
\par \b0\cf1 	
\par 	\b char\b0  entries\cf2\b [\b0\cf5 10\cf2\b ]\b0\cf1  \cf2\b =\b0\cf1  \cf2\b \{\b0\cf1  '0'\cf2\b ,\b0\cf1  '1'\cf2\b ,\b0\cf1  '2'\cf2\b ,\b0\cf1  '3'\cf2\b ,\b0\cf1  '4'\cf2\b ,\b0\cf1  '5'\cf2\b ,\b0\cf1  '6'\cf2\b ,\b0\cf1  '7'\cf2\b ,\b0\cf1  '8'\cf2\b ,\b0\cf1  '9' \cf2\b \};
\par \b0\cf1 	
\par 	\b for\b0  \cf2\b (\cf1 int\b0  i \cf2\b =\b0\cf1  \cf5 0\cf2\b ;\b0\cf1  i \cf2\b <\b0\cf1  \b sizeof\cf2 (\b0\cf1 entries\cf2\b )\b0\cf1  \cf2\b /\b0\cf1  \b sizeof\cf2 (\b0\cf1 entries\cf2\b [\b0\cf5 0\cf2\b ]);\b0\cf1  i\cf2\b ++)
\par \b0\cf1 		Push\cf2\b (\b0\cf1 stack\cf2\b ,\b0\cf1  entries\cf2\b [\b0\cf1 i\cf2\b ],\b0\cf1  name\cf2\b );
\par \b0\cf1 		
\par 	printf\cf2\b (\cf3 "\\n"\cf2 );
\par \}
\par 
\par \cf1 void\b0  AutoPop\cf2\b (\b0\cf1 Stack \cf2\b *\b0\cf1 stack\cf2\b ,\b0\cf1  \b char\cf2 *\b0\cf1  name\cf2\b )\b0\cf1  \cf2\b \{
\par \b0\cf1 	printf\cf2\b (\cf3 "--- [Automatic Pop Event] ---\\n\\n"\cf2 );
\par \b0\cf1 	
\par 	\b while\b0  \cf2\b (\b0\cf1 Pop\cf2\b (\b0\cf1 stack\cf2\b ,\b0\cf1  name\cf2\b )\b0\cf1  \cf2\b !=\b0\cf1  '.'\cf2\b );
\par \}
\par }